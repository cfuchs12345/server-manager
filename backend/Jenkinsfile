pipeline {
    agent {label 'rust-slave'}

    parameters {
        string(
        name: "CLEAN_UP", 
        defaultValue: 'false', 
        description: 'Do cleanup before build')
    }
    options {
        copyArtifactPermission('docker/Docker-Server-Manager');
    }
    stages {
        stage('checkout') {
            steps {
                echo 'checkout'
            }
        }
        stage('Init') {
            steps {
                sh "rustup default stable"
            }
        }
        stage('Clean') {
             when {
                expression { params.CLEAN_UP != 'false' }
            }
            steps {
                dir('backend') {
                    sh "cargo clean"
                    sh "cargo clean --release"
                }
            }
        }
        stage('Build') {
            steps {
                dir('backend') {
                    sh "cargo build --release"
                }
            }
        }
        stage('Test') {
            steps {
                dir('backend') {
                    sh "cargo test"
                }
            }
        }
        stage('Clippy') {
            steps {
                dir('backend') {
                    sh "cargo clippy --all"
                }
            }
        }
        stage('Rustfmt') {
            steps {
                dir('backend') {
                    // The build will fail if rustfmt thinks any changes are
                    // required.
                    sh "cargo fmt --all"
                }
            }
        }
        stage('Doc') {
            steps {
                dir('backend') {
                    sh "cargo doc"
                    // We run a python `SimpleHTTPServer` against
                    // /var/lib/jenkins/jobs/<repo>/branches/master/javadoc to
                    // display our docs
                    step([$class: 'JavadocArchiver',
                        javadocDir: 'target/doc',
                        keepAll: false])
                }
            }
        }
        stage("Create Artifact") {
            steps {
                sh "mkdir -p target/zipfile_content"
                echo "copying resources for zip file into target/zipfile_content"
                sh 'cp backend/target/release/server-manager-rust target/zipfile_content'
                sh 'cp backend/.env.example target/zipfile_content'
                sh 'cp backend/inet.so target/zipfile_content'
                sh 'cp backend/inet.dll target/zipfile_content'
                sh 'cp -r backend/shipped_plugins target/zipfile_content'
                sh 'cp -r backend/server target/zipfile_content'
                echo "creating zip file"
                zip zipFile: "target/server-manager-backend.zip", archive: true, dir: "target/zipfile_content", overwrite: true
            }
        }
    }
    post{
        always{
            archiveArtifacts artifacts: 'target/server-manager-backend.zip', fingerprint: true

            emailext body: 'Build executed',
            recipientProviders: [developers(), requestor()],
            subject: 'jenkins build ${JOB_DESCRIPTION}: ${BUILD_STATUS}',
            to: 'christopher@christopherfuchs.de'
        }
    }
}